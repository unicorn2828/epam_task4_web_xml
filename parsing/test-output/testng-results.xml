<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" ignored="0" total="10" passed="10">
  <reporter-output>
  </reporter-output>
  <suite name="Default suite" duration-ms="1631" started-at="2019-12-27T16:39:56 MSK" finished-at="2019-12-27T16:39:57 MSK">
    <groups>
    </groups>
    <test name="Default test" duration-ms="1631" started-at="2019-12-27T16:39:56 MSK" finished-at="2019-12-27T16:39:57 MSK">
      <class name="test.kononov.parsing.factory.BuilderFactoryTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:test.kononov.parsing.factory.BuilderFactoryTest@4cf4d528]" name="setUp" is-config="true" duration-ms="50" started-at="2019-12-27T16:39:56 MSK" description="it creates an expected item and writes it to	the xml file" finished-at="2019-12-27T16:39:56 MSK">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="buildGemsDOMBuilderTest()[pri:0, instance:test.kononov.parsing.factory.BuilderFactoryTest@4cf4d528]" name="buildGemsDOMBuilderTest" duration-ms="19" started-at="2019-12-27T16:39:57 MSK" description="Gems DOM_Builder test" finished-at="2019-12-27T16:39:57 MSK">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- buildGemsDOMBuilderTest -->
        <test-method status="PASS" signature="buildGemsSAXBuilderTest()[pri:0, instance:test.kononov.parsing.factory.BuilderFactoryTest@4cf4d528]" name="buildGemsSAXBuilderTest" duration-ms="8" started-at="2019-12-27T16:39:57 MSK" description="Gems SAX_Builder test" finished-at="2019-12-27T16:39:57 MSK">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- buildGemsSAXBuilderTest -->
        <test-method status="PASS" signature="buildGemsStAXBuilderTest()[pri:0, instance:test.kononov.parsing.factory.BuilderFactoryTest@4cf4d528]" name="buildGemsStAXBuilderTest" duration-ms="44" started-at="2019-12-27T16:39:57 MSK" description="Gems StAX_Builder test without Name and Preciousness fields" finished-at="2019-12-27T16:39:57 MSK">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- buildGemsStAXBuilderTest -->
        <test-method status="PASS" signature="tierDown()[pri:0, instance:test.kononov.parsing.factory.BuilderFactoryTest@4cf4d528]" name="tierDown" is-config="true" duration-ms="1" started-at="2019-12-27T16:39:57 MSK" finished-at="2019-12-27T16:39:57 MSK">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tierDown -->
      </class> <!-- test.kononov.parsing.factory.BuilderFactoryTest -->
      <class name="test.kononov.parsing.command.ParsingCommandTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:test.kononov.parsing.command.ParsingCommandTest@77846d2c]" name="setUp" is-config="true" duration-ms="1" started-at="2019-12-27T16:39:57 MSK" finished-at="2019-12-27T16:39:57 MSK">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="executeTest()[pri:0, instance:test.kononov.parsing.command.ParsingCommandTest@77846d2c]" name="executeTest" duration-ms="43" started-at="2019-12-27T16:39:57 MSK" description="positive ParsingCommand.class test; use mock" finished-at="2019-12-27T16:39:57 MSK">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeTest -->
        <test-method status="PASS" signature="setDown()[pri:0, instance:test.kononov.parsing.command.ParsingCommandTest@77846d2c]" name="setDown" is-config="true" duration-ms="1" started-at="2019-12-27T16:39:57 MSK" finished-at="2019-12-27T16:39:57 MSK">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setDown -->
      </class> <!-- test.kononov.parsing.command.ParsingCommandTest -->
      <class name="test.kononov.parsing.service.CommandProviderTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:test.kononov.parsing.service.CommandProviderTest@548ad73b]" name="setUp" is-config="true" duration-ms="1084" started-at="2019-12-27T16:39:56 MSK" finished-at="2019-12-27T16:39:57 MSK">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="defineCommandTest()[pri:0, instance:test.kononov.parsing.service.CommandProviderTest@548ad73b]" name="defineCommandTest" duration-ms="3" started-at="2019-12-27T16:39:57 MSK" description="command factory fest, default command &#039;HOME&#039;" finished-at="2019-12-27T16:39:57 MSK">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- defineCommandTest -->
        <test-method status="PASS" signature="tierDown()[pri:0, instance:test.kononov.parsing.service.CommandProviderTest@548ad73b]" name="tierDown" is-config="true" duration-ms="1" started-at="2019-12-27T16:39:57 MSK" finished-at="2019-12-27T16:39:57 MSK">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tierDown -->
      </class> <!-- test.kononov.parsing.service.CommandProviderTest -->
      <class name="test.kononov.parsing.command.HomeCommandTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:test.kononov.parsing.command.HomeCommandTest@4c762604]" name="setUp" is-config="true" duration-ms="2" started-at="2019-12-27T16:39:57 MSK" finished-at="2019-12-27T16:39:57 MSK">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="executeTest()[pri:0, instance:test.kononov.parsing.command.HomeCommandTest@4c762604]" name="executeTest" duration-ms="4" started-at="2019-12-27T16:39:57 MSK" description="positive BackCommand.class test; use mock" finished-at="2019-12-27T16:39:57 MSK">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeTest -->
        <test-method status="PASS" signature="setDown()[pri:0, instance:test.kononov.parsing.command.HomeCommandTest@4c762604]" name="setDown" is-config="true" duration-ms="0" started-at="2019-12-27T16:39:57 MSK" finished-at="2019-12-27T16:39:57 MSK">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setDown -->
      </class> <!-- test.kononov.parsing.command.HomeCommandTest -->
      <class name="test.kononov.parsing.validator.ErrorHandlerTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:test.kononov.parsing.validator.ErrorHandlerTest@727803de]" name="setUp" is-config="true" duration-ms="0" started-at="2019-12-27T16:39:57 MSK" finished-at="2019-12-27T16:39:57 MSK">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="getLineAddressTest()[pri:0, instance:test.kononov.parsing.validator.ErrorHandlerTest@727803de]" name="getLineAddressTest" duration-ms="2" started-at="2019-12-27T16:39:57 MSK" description="GemErrorHandler test" finished-at="2019-12-27T16:39:57 MSK">
          <exception class="org.xml.sax.SAXException">
            <message>
              <![CDATA[test]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.xml.sax.SAXException: test
org.xml.sax.SAXParseExceptionpublicId: test; systemId: test; lineNumber: 2; columnNumber: 2; test
at by.kononov.parsing.validator.GemErrorHandler.error(GemErrorHandler.java:21)
at test.kononov.parsing.validator.ErrorHandlerTest.getLineAddressTest(ErrorHandlerTest.java:29)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: org.xml.sax.SAXParseExceptionpublicId: test; systemId: test; lineNumber: 2; columnNumber: 2; test
at test.kononov.parsing.validator.ErrorHandlerTest.setUp(ErrorHandlerTest.java:18)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestMethodWorker.invokeBeforeClassMethods(TestMethodWorker.java:176)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:122)
... 16 more
]]>
            </full-stacktrace>
          </exception> <!-- org.xml.sax.SAXException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getLineAddressTest -->
        <test-method status="PASS" signature="tierDown()[pri:0, instance:test.kononov.parsing.validator.ErrorHandlerTest@727803de]" name="tierDown" is-config="true" duration-ms="1" started-at="2019-12-27T16:39:57 MSK" finished-at="2019-12-27T16:39:57 MSK">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tierDown -->
      </class> <!-- test.kononov.parsing.validator.ErrorHandlerTest -->
      <class name="test.kononov.parsing.service.ParsingLogicTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:test.kononov.parsing.service.ParsingLogicTest@2641e737]" name="setUp" is-config="true" duration-ms="1" started-at="2019-12-27T16:39:57 MSK" description="it creates an expected item and writes it to	the xml file" finished-at="2019-12-27T16:39:57 MSK">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="receiveGemListTest()[pri:0, instance:test.kononov.parsing.service.ParsingLogicTest@2641e737]" name="receiveGemListTest" duration-ms="4" started-at="2019-12-27T16:39:57 MSK" description="ParsingCommandLogic.class receiveGemList() method test" finished-at="2019-12-27T16:39:57 MSK">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- receiveGemListTest -->
      </class> <!-- test.kononov.parsing.service.ParsingLogicTest -->
      <class name="test.kononov.parsing.validator.XsdValidatorTest">
        <test-method status="PASS" signature="validateNegativeXSD()[pri:0, instance:test.kononov.parsing.validator.XsdValidatorTest@704921a5]" name="validateNegativeXSD" duration-ms="254" started-at="2019-12-27T16:39:57 MSK" description="validation of xsd" finished-at="2019-12-27T16:39:57 MSK">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateNegativeXSD -->
        <test-method status="PASS" signature="validatePositiveXSD()[pri:0, instance:test.kononov.parsing.validator.XsdValidatorTest@704921a5]" name="validatePositiveXSD" duration-ms="23" started-at="2019-12-27T16:39:57 MSK" description="validation of xsd" finished-at="2019-12-27T16:39:57 MSK">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validatePositiveXSD -->
      </class> <!-- test.kononov.parsing.validator.XsdValidatorTest -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
